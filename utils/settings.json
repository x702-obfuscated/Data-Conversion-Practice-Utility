{
    "binary_conversion_assignment_hash": "6596f7498640390898bdf3c8fe9ffb4ab5f9f2b8ffdf08b8497a03196c74650d",
    "hexadecimal_conversion_assignment_hash": "4ae0a7b05017507599e0f0875c7a61fc9e8d7bb573bb7a2e61ebe0ad81ce87b9",
    "ascii_conversion_assignment_hash": "abd7c3fd08c2a5f0e241d4e0cf29d4b9b8075178a7d3bd4b19d9d7c62338a248",
    "ascii_conversion.py": "",
    "binary_conversion.py": "",
    "hexadecimal_conversion.py": "",
    "__init__.py": "",
    "binary_conversion_save": {},
    "hexadecimal_conversion_save": {},
    "ascii_conversion_save": {}
}